#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use Data::Dumper;
use FindBin '$Bin';
use YAML::XS qw/ LoadFile /;
use IO::All;
use File::Copy qw/ copy /;
use HTML::Template::Compiled;
use POSIX qw/ strftime /;

my %tests;
my %frameworks;
my @frameworks;
my %framework_info;
my %htc_args = (
    tagstyle => [qw/ -classic -comment -jsp +tt /],
    default_escape => 'HTML',
    loop_context_vars => 1,
    post_chomp => 2,
    use_expressions => 1,
);

my $datadir = "$Bin/../data";
gather_data();

create_html();

sub gather_data {
    my @files = map { "$_" } grep { m/\.yaml$/ } io->dir("matrix/data")->all_files;

    for my $file (sort @files) {
        unless ($file =~ m{/([A-Z0-9-]+)\.yaml}i) {
            next;
        }
        my $fw = $1;
        push @frameworks, $fw;
        my $data = LoadFile($file);
        my $testdata = $data->{tests};
        my $info = $data->{info};
        $info->{run} = $data->{date};
        $info->{runtime} = $data->{time};
        $framework_info{ $fw } = info2html($info);

        for my $test (keys %$testdata) {
            my $results = $testdata->{ $test };
            my $title = $results->{title};
            $tests{ $test }->{id} = $test;
            $tests{ $test }->{title} = $title;
            $tests{ $test }->{frameworks}->{ $fw } = $results;
            $tests{ $test }->{frameworks}->{ $fw }->{id} = $fw;
            if ($results->{ok}) {
                $frameworks{ $fw }->{ok}++;
            }
            elsif ($results->{json_ok}) {
                $frameworks{ $fw }->{json_ok}++;
            }
            elsif ($results->{diff}) {
                $frameworks{ $fw }->{diff}++;
            }
            elsif ($results->{json_diff}) {
                $frameworks{ $fw }->{json_diff}++;
            }
            elsif ($results->{na}) {
                $frameworks{ $fw }->{na}++;
            }
            elsif ($results->{error}) {
                $frameworks{ $fw }->{error}++;
            }
            $frameworks{ $fw }->{count}++;

        }
    }
}

sub create_html {
    mkdir "matrix/html";
    mkdir "matrix/html/details";
    mkdir "matrix/html/img";
    mkdir "matrix/html/css";
    mkdir "matrix/html/js";
    my @tests;

    my @framework_names = map {
        my ($lang, $name, $type) = split /-/, $_;
        if ($lang eq 'libyaml') {
            $name = $lang;
            $lang = 'C';
            $type = 'event';
        }
        elsif ($lang eq 'ruby' and $name eq 'json') {
            $type = $name;
            $name = "yaml";
        }
        elsif ($lang eq 'perl6') {
            $type = $name;
            $name = "yamlish";
        }
        elsif ($lang =~ /^(pyyaml|ruamel)$/) {
            $type = $name;
            $name = $lang;
            $lang = "python";
        }
        elsif ($lang eq 'java') {
            $type = $name;
            $name = "snake";
        }
        elsif ($lang eq 'nimyaml') {
            $lang = "nim";
            $type = $name;
            $name = "yaml";
        }
        elsif ($lang eq 'cpp') {
            $lang = "C++";
            $name = "yaml";
            $type = "event";
        }
        elsif ($lang eq 'luajit') {
            $lang = "lua";
            $name = "yaml";
            $type = "json";
        }
        if ($type !~ m/^(json|event)/) {
            $type = "native";
        }
        {
            lang => $lang,
            name => $name,
            type => $type,
            fullname => $_,
        };
    } @frameworks;
    @framework_names = sort {
        $a->{type} cmp $b->{type}
        || $a->{lang} cmp $b->{lang}
        || $a->{name} cmp $b->{name}
    } @framework_names;


    for my $test (sort { $tests{ $a }->{title} cmp $tests{ $b }->{title}} keys %tests) {
        my $data = $tests{ $test };
        my $frameworks = $data->{frameworks};
        my @frameworks;
        for my $fw (@framework_names) {
            my $results = $frameworks->{ $fw->{fullname} };
            $results->{test} = $test;
            if (exists $results->{got_json}) {
                $results->{got_json_lines} = [split m/\n/, $results->{got_json} ];
            }
            push @frameworks, $results;
        }
        push @tests, {
            id => $data->{id},
            title => $data->{title},
            frameworks => \@frameworks,
        };
        create_details($test);
    }
    say "Created detail pages matrix/html/details/<id>.html";
    my @framework_headers;
    for my $fw (@framework_names) {
        push @framework_headers, {
            fullname => $fw->{fullname},
            %{ $frameworks{ $fw->{fullname} } || {} },
        };
    }

    my %selectors;
    for my $fw (@framework_names) {
        push @{ $selectors{ $fw->{type} } }, $fw;
    }
    my @selectors = map {
        +{
            type => $_,
            frameworks => $selectors{ $_ }
        },
    } sort {
        $selectors{ $a }->[0]->{type}
            cmp
        $selectors{ $b }->[0]->{type}
    } keys %selectors;

    {
        my $htc = HTML::Template::Compiled->new(
            filename => "index.html",
            path => "$Bin/../share/matrix/templates",
            %htc_args,
        );
        $htc->param(
            framework_names => \@framework_names,
            framework_headers => \@framework_headers,
            tests => \@tests,
            selectors => \@selectors,
        );

        open my $fh, ">", "matrix/html/index.html" or die $!;
        print $fh $htc->output;
        close $fh;
        say "Created matrix/html/index.html";
    }
    {
        my $htc = HTML::Template::Compiled->new(
            filename => "frameworks.html",
            path => "$Bin/../share/matrix/templates",
            %htc_args,
        );
        $htc->param(
            framework_info => \%framework_info,
        );

        open my $fh, ">", "matrix/html/frameworks.html" or die $!;
        print $fh $htc->output;
        close $fh;
        say "Created matrix/html/frameworks.html";
    }

    copy ("share/matrix/img/gnome-help.png", "matrix/html/img");
    copy ("share/matrix/css/yaml.css", "matrix/html/css");
    copy ("share/matrix/css/matrix.css", "matrix/html/css");
    copy ("share/matrix/js/jquery-3.1.1.min.js", "matrix/html/js");
    copy ("share/matrix/js/matrix.js", "matrix/html/js");
}

sub create_details {
    my ($id) = @_;
    my $yaml = io->file("$datadir/$id/in.yaml")->slurp;
    my $events = io->file("$datadir/$id/test.event")->slurp;

    my $json;
    my $json_lines;
    if (-f "matrix/expected/$id/in.json") {
        $json = io->file("matrix/expected/$id/in.json")->slurp;
        $json_lines = [ split m/\n/, $json ];
    }

    my $htc = HTML::Template::Compiled->new(
        filename => "details.html",
        path => "$Bin/../share/matrix/templates",
        %htc_args,
    );
    $htc->param(
        id => $id,
        test => $tests{ $id },
        yaml => $yaml,
        json => $json,
        json_lines => $json_lines,
        events => $events,
    );
    open my $fh, ">", "matrix/html/details/$id.html" or die $!;
    print $fh $htc->output;
    close $fh;
}

sub info2html {
    my ($info) = @_;
    return unless $info;
    $info->{run_date} = strftime("%Y-%m-%d %H:%M GMT", gmtime $info->{run});
    return $info unless $info->{commit};

    my $link;
    my $commitlink;
    $info->{commit_short} = substr($info->{commit}, 0, 8);
    my $provider = $info->{provider} // '';
    if ($provider eq 'github') {
        $link = "https://github.com/$info->{reponame}";
        $commitlink =
            "https://github.com/$info->{reponame}/commit/$info->{commit}";
    }
    elsif ($provider eq 'bitbucket') {
        $link = "https://bitbucket.org/$info->{reponame}";
        $commitlink =
            "https://bitbucket.org/$info->{reponame}/commits/$info->{commit}";
    }
    $info->{link} = $link;
    $info->{commit_link} = $commitlink;

    $info->{language_name} = {
        cpp => "C++",
        c => "C",
        haskell => "Haskell",
        java => "Java",
        js => "Javascript",
        lua => "Lua",
        nim => "Nim",
        perl5 => "Perl 5",
        perl6 => "Perl 6",
        python => "Python",
        ruby => "Ruby",
    }->{ $info->{language} };

    $info->{output_name} = {
        event => "Event Stream",
        json => "JSON",
        native => "Native Data",
    }->{ $info->{output} };

    return $info;
}
